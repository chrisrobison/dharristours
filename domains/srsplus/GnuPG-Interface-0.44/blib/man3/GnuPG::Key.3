.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GnuPG::Key 3"
.TH GnuPG::Key 3 "2010-06-05" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
GnuPG::Key \- GnuPG Key Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # assumes a GnuPG::Interface object in $gnupg
\&  my @keys = $gnupg->get_public_keys( 'ftobin' );
.Ve
.PP
.Vb 1
\&  # now GnuPG::PublicKey objects are in @keys
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GnuPG::Key objects are generally not instantiated on their
own, but rather used as a superclass of GnuPG::PublicKey,
GnuPG::SecretKey, or GnuPG::SubKey objects.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.Sh "Initialization Methods"
.IX Subsection "Initialization Methods"
.IP "new( \fI%initialization_args\fR )" 4
.IX Item "new( %initialization_args )"
This methods creates a new object.  The optional arguments are
initialization of data members.
.IP "hash_init( \fI%args\fR )." 4
.IX Item "hash_init( %args )."
.PD 0
.IP "short_hex_id" 4
.IX Item "short_hex_id"
.PD
This returns the commonly-used short, 8 character short hex id
of the key.
.IP "compare( \fI$other\fR, \fI$deep\fR )" 4
.IX Item "compare( $other, $deep )"
Returns non-zero only when this Key is identical to the other
GnuPG::Key.  If \f(CW$deep\fR is present and non\-zero, the key's associated
signatures, revocations, and revokers will also be compared.
.SH "OBJECT DATA MEMBERS"
.IX Header "OBJECT DATA MEMBERS"
.IP "length" 4
.IX Item "length"
Number of bits in the key.
.IP "algo_num" 4
.IX Item "algo_num"
They algorithm number that the Key is used for.
.IP "usage flags" 4
.IX Item "usage flags"
The Key Usage flags associated with this key, represented as a string
of lower-case letters.  Possible values include: (a) authenticate, (c)
certify, (e) encrypt, and (s) sign.
.Sp
A key may have any combination of them in any order.  In addition to
these letters, the primary key has uppercase versions of the letters
to denote the _usable_ capabilities of the entire key, and a potential
letter 'D' to indicate a disabled key.
.Sp
See \*(L"key capabilities\*(R" \s-1DETAILS\s0 from the GnuPG sources for more
details.
.IP "hex_data" 4
.IX Item "hex_data"
The data of the key.  \s-1WARNING:\s0 this seems to have never been
instantiated, and should always be undef.
.IP "pubkey_data" 4
.IX Item "pubkey_data"
A list of Math::BigInt objects that correspond to the public key
material for the given key (this member is empty on secret keys).
.Sp
For \s-1DSA\s0 keys, the values are: prime (p), group order (q), group generator (g), y
.Sp
For \s-1RSA\s0 keys, the values are: modulus (n), exponent (e)
.Sp
For El Gamal keys, the values are: prime (p), group generator (g), y
.Sp
For more details, see: http://tools.ietf.org/html/rfc4880#page\-42
.IP "hex_id" 4
.IX Item "hex_id"
The long hex id of the key.  This is not the fingerprint nor
the short hex id, which is 8 hex characters.
.IP "creation_date_string" 4
.IX Item "creation_date_string"
.PD 0
.IP "expiration_date_string" 4
.IX Item "expiration_date_string"
.PD
Formatted date of the key's creation and expiration.  If the key has
no expiration, expiration_date_string will return undef.
.IP "creation_date" 4
.IX Item "creation_date"
.PD 0
.IP "expiration_date" 4
.IX Item "expiration_date"
.PD
Date of the key's creation and expiration, stored as the number of
seconds since midnight 1970\-01\-01 \s-1UTC\s0.  If the key has no expiration,
expiration_date will return undef.
.IP "fingerprint" 4
.IX Item "fingerprint"
A GnuPG::Fingerprint object.
.IP "signatures" 4
.IX Item "signatures"
A list of GnuPG::Signature objects embodying the signatures on this
key.  For subkeys, the signatures are usually subkey-binding
signatures.  For primary keys, the signatures are statements about the
key itself.
.IP "revocations" 4
.IX Item "revocations"
A list of revocations associated with this key, stored as
GnuPG::Signature objects (since revocations are a type of
certification as well).  Note that a revocation of a primary key has a
different semantic meaning than a revocation associated with a subkey.
.IP "revokers" 4
.IX Item "revokers"
A list of GnuPG::Revoker objects associated with this key, indicating
other keys which are allowed to revoke certifications made by this
key.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
GnuPG::Fingerprint,
GnuPG::Signature,
GnuPG::Revoker,
