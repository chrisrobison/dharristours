.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "GnuPG::Handles 3"
.TH GnuPG::Handles 3 "2009-07-13" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
GnuPG::Handles \- GnuPG handles bundle
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use IO::Handle;
\&  my ( $stdin, $stdout, $stderr,
\&       $status_fh, $logger_fh, $passphrase_fh,
\&     )
\&    = ( IO::Handle->new(), IO::Handle->new(), IO::Handle->new(),
\&        IO::Handle->new(), IO::Handle->new(), IO::Handle->new(),
\&      );
.Ve
.PP
.Vb 8
\&  my $handles = GnuPG::Handles->new
\&    ( stdin      => $stdin,
\&      stdout     => $stdout,
\&      stderr     => $stderr,
\&      status     => $status_fh,
\&      logger     => $logger_fh,
\&      passphrase => $passphrase_fh,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
GnuPG::Handles objects are generally instantiated
to be used in conjunction with methods of objects
of the class GnuPG::Interface.  GnuPG::Handles objects
represent a collection of handles that are used to
communicate with GnuPG.
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.Sh "Initialization Methods"
.IX Subsection "Initialization Methods"
.IP "new( \fI%initialization_args\fR )" 4
.IX Item "new( %initialization_args )"
This methods creates a new object.  The optional arguments are
initialization of data members.
.IP "hash_init( \fI%args\fR )." 4
.IX Item "hash_init( %args )."
.SH "OBJECT DATA MEMBERS"
.IX Header "OBJECT DATA MEMBERS"
.PD 0
.IP "stdin" 4
.IX Item "stdin"
.PD
This handle is connected to the standard input of a GnuPG process.
.IP "stdout" 4
.IX Item "stdout"
This handle is connected to the standard output of a GnuPG process.
.IP "stderr" 4
.IX Item "stderr"
This handle is connected to the standard error of a GnuPG process.
.IP "status" 4
.IX Item "status"
This handle is connected to the status output handle of a GnuPG process.
.IP "logger" 4
.IX Item "logger"
This handle is connected to the logger output handle of a GnuPG process.
.IP "passphrase" 4
.IX Item "passphrase"
This handle is connected to the passphrase input handle of a GnuPG process.
.IP "command" 4
.IX Item "command"
This handle is connected to the command input handle of a GnuPG process.
.IP "options" 4
.IX Item "options"
This is a hash of hashrefs of settings pertaining to the handles
in this object.  The outer-level hash is keyed by the names of the
handle the setting is for, while the inner is keyed by the setting
being referenced.  For example, to set the setting \f(CW\*(C`direct\*(C'\fR to true
for the filehandle \f(CW\*(C`stdin\*(C'\fR, the following code will do:
.Sp
.Vb 5
\&    # assuming $handles is an already-created
\&    # GnuPG::Handles object, this sets all
\&    # options for the filehandle stdin in one blow,
\&    # clearing out all others
\&    $handles->options( 'stdin', { direct => 1 } );
.Ve
.Sp
.Vb 3
\&    # this is useful to just make one change
\&    # to the set of options for a handle
\&    $handles->options( 'stdin' )->{direct} = 1;
.Ve
.Sp
.Vb 2
\&    # and to get the setting...
\&    $setting = $handles->options( 'stdin' )->{direct};
.Ve
.Sp
.Vb 2
\&    # and to clear the settings for stdin
\&    $handles->options( 'stdin', {} );
.Ve
.Sp
The currently-used settings are as follows:
.RS 4
.IP "direct" 4
.IX Item "direct"
If the setting \f(CW\*(C`direct\*(C'\fR is true for a handle, the GnuPG
process spawned will access the handle directly.  This is useful for
having the GnuPG process read or write directly to or from
an already-opened file.
.RE
.RS 4
.RE
.SH "SEE ALSO"
.IX Header "SEE ALSO"
GnuPG::Interface,
